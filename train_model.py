import numpy as np
import os
import joblib
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from utils.image_utils import load_images_from_folder, images_to_vectors, normalize_image_for_display

class FaceRecognitionPCA:
    def __init__(self, n_components=50, target_size=(100, 100)):
        """
        Kh·ªüi t·∫°o model PCA cho nh·∫≠n di·ªán khu√¥n m·∫∑t
        
        Args:
            n_components: S·ªë th√†nh ph·∫ßn ch√≠nh c·∫ßn gi·ªØ l·∫°i
            target_size: K√≠ch th∆∞·ªõc ·∫£nh chu·∫©n
        """
        self.n_components = n_components
        self.target_size = target_size
        self.pca = PCA(n_components=n_components)
        self.scaler = StandardScaler()
        self.mean_face = None
        self.eigenfaces = None
        self.training_data_pca = None
        self.training_labels = None
        self.label_names = None
        
    def train(self, data_folder):
        """
        Hu·∫•n luy·ªán model PCA v·ªõi d·ªØ li·ªáu t·ª´ th∆∞ m·ª•c
        
        Args:
            data_folder: ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ch·ª©a d·ªØ li·ªáu training
        """
        print("ƒêang ƒë·ªçc d·ªØ li·ªáu training...")
        
        # ƒê·ªçc d·ªØ li·ªáu
        images, labels, label_names = load_images_from_folder(data_folder, self.target_size)
        
        if len(images) == 0:
            raise ValueError("Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o trong th∆∞ m·ª•c data!")
        
        print(f"ƒê√£ ƒë·ªçc {len(images)} ·∫£nh t·ª´ {len(label_names)} ng∆∞·ªùi")
        
        # Chuy·ªÉn ·∫£nh th√†nh vectors v√† normalize
        image_vectors = images_to_vectors(images.astype(np.float32) / 255.0)
        
        # T√≠nh mean face
        self.mean_face = np.mean(image_vectors, axis=0)
        
        # Tr·ª´ mean face
        centered_data = image_vectors - self.mean_face
        
        # Chu·∫©n h√≥a d·ªØ li·ªáu
        centered_data = self.scaler.fit_transform(centered_data)
        
        print("ƒêang th·ª±c hi·ªán PCA...")
        
        # ƒêi·ªÅu ch·ªânh n_components n·∫øu c·∫ßn
        max_components = min(len(images), image_vectors.shape[1])
        if self.n_components > max_components:
            self.n_components = max_components - 1
            print(f"ƒêi·ªÅu ch·ªânh n_components xu·ªëng {self.n_components}")
            self.pca = PCA(n_components=self.n_components)
        
        # Th·ª±c hi·ªán PCA
        self.training_data_pca = self.pca.fit_transform(centered_data)
        
        # L∆∞u th√¥ng tin
        self.training_labels = labels
        self.label_names = label_names
        self.eigenfaces = self.pca.components_
        
        # In th√¥ng tin
        explained_variance_ratio = np.sum(self.pca.explained_variance_ratio_)
        print(f"PCA ho√†n th√†nh!")
        print(f"S·ªë th√†nh ph·∫ßn ch√≠nh: {self.n_components}")
        print(f"T·ª∑ l·ªá ph∆∞∆°ng sai ƒë∆∞·ª£c gi·ªØ l·∫°i: {explained_variance_ratio:.2%}")
        
        return self
    
    def save_model(self, model_path="models/pca_face_model.pkl"):
        """
        L∆∞u model ƒë√£ train
        """
        os.makedirs(os.path.dirname(model_path), exist_ok=True)
        
        model_data = {
            'pca': self.pca,
            'scaler': self.scaler,
            'mean_face': self.mean_face,
            'eigenfaces': self.eigenfaces,
            'training_data_pca': self.training_data_pca,
            'training_labels': self.training_labels,
            'label_names': self.label_names,
            'target_size': self.target_size,
            'n_components': self.n_components
        }
        
        joblib.dump(model_data, model_path)
        print(f"Model ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: {model_path}")
    
    def visualize_eigenfaces(self, n_faces=9, save_path="models/eigenfaces.png"):
        """
        Hi·ªÉn th·ªã v√† l∆∞u eigenfaces
        """
        if self.eigenfaces is None:
            print("Model ch∆∞a ƒë∆∞·ª£c train!")
            return
        
        fig, axes = plt.subplots(3, 3, figsize=(10, 10))
        fig.suptitle('Top 9 Eigenfaces', fontsize=16)
        
        for i in range(min(n_faces, len(self.eigenfaces))):
            row, col = i // 3, i % 3
            
            # Chuy·ªÉn eigenface v·ªÅ d·∫°ng ·∫£nh
            eigenface = self.eigenfaces[i].reshape(self.target_size)
            eigenface_normalized = normalize_image_for_display(eigenface)
            
            axes[row, col].imshow(eigenface_normalized, cmap='gray')
            axes[row, col].set_title(f'Eigenface {i+1}')
            axes[row, col].axis('off')
        
        plt.tight_layout()
        plt.savefig(save_path, dpi=150, bbox_inches='tight')
        plt.show()
        print(f"Eigenfaces ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: {save_path}")

def main():
    """
    H√†m main ƒë·ªÉ ch·∫°y training
    """
    # Ki·ªÉm tra th∆∞ m·ª•c data
    data_folder = "data"
    if not os.path.exists(data_folder):
        print("T·∫°o th∆∞ m·ª•c data m·∫´u...")
        os.makedirs(data_folder)
        print("Vui l√≤ng th√™m ·∫£nh v√†o th∆∞ m·ª•c data/ theo c·∫•u tr√∫c:")
        print("data/")
        print("  ‚îú‚îÄ‚îÄ person1/")
        print("  ‚îÇ   ‚îú‚îÄ‚îÄ img1.jpg")
        print("  ‚îÇ   ‚îî‚îÄ‚îÄ img2.jpg")
        print("  ‚îî‚îÄ‚îÄ person2/")
        print("      ‚îú‚îÄ‚îÄ img1.jpg")
        print("      ‚îî‚îÄ‚îÄ img2.jpg")
        return
    
    # Ki·ªÉm tra c√≥ d·ªØ li·ªáu kh√¥ng
    if not any(os.path.isdir(os.path.join(data_folder, item)) 
               for item in os.listdir(data_folder)):
        print("Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c con n√†o trong data/")
        print("Vui l√≤ng t·∫°o th∆∞ m·ª•c cho m·ªói ng∆∞·ªùi v√† th√™m ·∫£nh v√†o!")
        return
    
    try:
        # Kh·ªüi t·∫°o v√† train model v·ªõi face detection
        print("üéØ S·ª≠ d·ª•ng Face Detection ƒë·ªÉ c·∫Øt khu√¥n m·∫∑t...")
        model = FaceRecognitionPCA(n_components=15, target_size=(100, 100))
        model.train(data_folder)
        
        # L∆∞u model
        model.save_model()
        
        # Hi·ªÉn th·ªã eigenfaces
        model.visualize_eigenfaces()
        
        print("\n‚úÖ Training ho√†n th√†nh v·ªõi Face Detection!")
        print("Model ƒë√£ ƒë∆∞·ª£c c·∫£i ti·∫øn ƒë·ªÉ t·∫≠p trung v√†o khu√¥n m·∫∑t, gi·∫£m ·∫£nh h∆∞·ªüng c·ªßa background")
        print("B·∫°n c√≥ th·ªÉ ch·∫°y demo b·∫±ng l·ªánh: streamlit run app_demo.py")
        
    except Exception as e:
        print(f"L·ªói trong qu√° tr√¨nh training: {e}")

if __name__ == "__main__":
    main()