import os
import numpy as np
import cv2
from PIL import Image, ImageDraw, ImageFont

def create_synthetic_face(size=(100, 100), person_id=0, variation=0):
    """
    T·∫°o khu√¥n m·∫∑t t·ªïng h·ª£p ƒë∆°n gi·∫£n ƒë·ªÉ demo
    
    Args:
        size: K√≠ch th∆∞·ªõc ·∫£nh
        person_id: ID c·ªßa ng∆∞·ªùi (·∫£nh h∆∞·ªüng ƒë·∫øn ƒë·∫∑c ƒëi·ªÉm khu√¥n m·∫∑t)
        variation: Bi·∫øn th·ªÉ c·ªßa c√πng m·ªôt ng∆∞·ªùi
    
    Returns:
        ·∫¢nh khu√¥n m·∫∑t t·ªïng h·ª£p
    """
    width, height = size
    
    # T·∫°o ·∫£nh tr·∫Øng
    img = Image.new('L', size, color=240)
    draw = ImageDraw.Draw(img)
    
    # Tham s·ªë cho t·ª´ng ng∆∞·ªùi (kh√°c nhau m·ªôt ch√∫t)
    np.random.seed(person_id * 100 + variation)
    
    # Khu√¥n m·∫∑t oval
    face_margin = 10 + person_id * 2
    face_coords = [
        face_margin, face_margin + person_id * 3,
        width - face_margin, height - face_margin - person_id * 2
    ]
    draw.ellipse(face_coords, fill=200 - person_id * 10)
    
    # M·∫Øt
    eye_y = height // 3 + person_id * 2
    eye_size = 8 + person_id
    
    # M·∫Øt tr√°i
    left_eye_x = width // 3 - person_id
    draw.ellipse([
        left_eye_x - eye_size//2, eye_y - eye_size//2,
        left_eye_x + eye_size//2, eye_y + eye_size//2
    ], fill=50)
    
    # M·∫Øt ph·∫£i
    right_eye_x = 2 * width // 3 + person_id
    draw.ellipse([
        right_eye_x - eye_size//2, eye_y - eye_size//2,
        right_eye_x + eye_size//2, eye_y + eye_size//2
    ], fill=50)
    
    # M≈©i
    nose_x = width // 2 + np.random.randint(-3, 4)
    nose_y = height // 2 + person_id
    nose_size = 3 + person_id // 2
    draw.ellipse([
        nose_x - nose_size, nose_y - nose_size//2,
        nose_x + nose_size, nose_y + nose_size//2
    ], fill=150 - person_id * 5)
    
    # Mi·ªáng
    mouth_y = 2 * height // 3 + person_id * 2
    mouth_width = 15 + person_id * 2
    mouth_height = 4 + person_id // 2
    draw.ellipse([
        width//2 - mouth_width//2, mouth_y - mouth_height//2,
        width//2 + mouth_width//2, mouth_y + mouth_height//2
    ], fill=100)
    
    # Th√™m m·ªôt ch√∫t nhi·ªÖu
    img_array = np.array(img)
    noise = np.random.normal(0, 5, img_array.shape)
    img_array = np.clip(img_array + noise, 0, 255).astype(np.uint8)
    
    return img_array

def create_sample_dataset(data_folder="data", n_people=5, n_images_per_person=4):
    """
    T·∫°o dataset m·∫´u v·ªõi khu√¥n m·∫∑t t·ªïng h·ª£p
    
    Args:
        data_folder: Th∆∞ m·ª•c l∆∞u d·ªØ li·ªáu
        n_people: S·ªë ng∆∞·ªùi
        n_images_per_person: S·ªë ·∫£nh m·ªói ng∆∞·ªùi
    """
    print(f"T·∫°o dataset m·∫´u v·ªõi {n_people} ng∆∞·ªùi, m·ªói ng∆∞·ªùi {n_images_per_person} ·∫£nh...")
    
    # T·∫°o th∆∞ m·ª•c data n·∫øu ch∆∞a c√≥
    os.makedirs(data_folder, exist_ok=True)
    
    for person_id in range(n_people):
        person_name = f"person_{person_id + 1}"
        person_folder = os.path.join(data_folder, person_name)
        os.makedirs(person_folder, exist_ok=True)
        
        print(f"T·∫°o ·∫£nh cho {person_name}...")
        
        for img_id in range(n_images_per_person):
            # T·∫°o ·∫£nh t·ªïng h·ª£p
            face_img = create_synthetic_face(
                size=(100, 100),
                person_id=person_id,
                variation=img_id
            )
            
            # L∆∞u ·∫£nh
            img_path = os.path.join(person_folder, f"img_{img_id + 1}.png")
            cv2.imwrite(img_path, face_img)
    
    print(f"‚úÖ ƒê√£ t·∫°o xong dataset m·∫´u t·∫°i th∆∞ m·ª•c '{data_folder}'")
    print(f"T·ªïng c·ªông: {n_people * n_images_per_person} ·∫£nh")
    print("\nB·∫°n c√≥ th·ªÉ:")
    print("1. Ch·∫°y 'python train_model.py' ƒë·ªÉ hu·∫•n luy·ªán model")
    print("2. Ch·∫°y 'streamlit run app_demo.py' ƒë·ªÉ xem demo")
    print("\nL∆∞u √Ω: ƒê√¢y l√† d·ªØ li·ªáu t·ªïng h·ª£p ƒë·ªÉ demo. ƒê·ªÉ c√≥ k·∫øt qu·∫£ t·ªët h∆°n,")
    print("h√£y thay th·∫ø b·∫±ng ·∫£nh khu√¥n m·∫∑t th·∫≠t trong th∆∞ m·ª•c data/")

def main():
    """
    H√†m main ƒë·ªÉ t·∫°o d·ªØ li·ªáu m·∫´u
    """
    print("üé≠ T·∫°o d·ªØ li·ªáu m·∫´u cho demo PCA Face Recognition")
    print("=" * 50)
    
    # Ki·ªÉm tra xem ƒë√£ c√≥ d·ªØ li·ªáu ch∆∞a
    data_folder = "data"
    if os.path.exists(data_folder) and os.listdir(data_folder):
        response = input(f"Th∆∞ m·ª•c '{data_folder}' ƒë√£ c√≥ d·ªØ li·ªáu. Ghi ƒë√®? (y/N): ").strip().lower()
        if response != 'y':
            print("H·ªßy t·∫°o d·ªØ li·ªáu m·∫´u.")
            return
    
    # T·∫°o dataset m·∫´u
    create_sample_dataset(
        data_folder=data_folder,
        n_people=5,
        n_images_per_person=4
    )

if __name__ == "__main__":
    main()