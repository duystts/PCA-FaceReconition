import streamlit as st
import numpy as np
import cv2
import matplotlib.pyplot as plt
import os
from PIL import Image
import plotly.express as px
import plotly.graph_objects as go
from recognize import FaceRecognizer
from utils.image_utils import normalize_image_for_display

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Demo PCA Face Recognition",
    page_icon="üë§",
    layout="wide"
)

# CSS ƒë·ªÉ l√†m ƒë·∫πp giao di·ªán
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .section-header {
        font-size: 1.5rem;
        color: #ff7f0e;
        margin-top: 2rem;
        margin-bottom: 1rem;
    }
    .result-box {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_resource
def load_recognizer():
    """Load model PCA (cached)"""
    try:
        return FaceRecognizer("models/pca_face_model.pkl")
    except:
        return None

def plot_similarity_chart(results):
    """T·∫°o bi·ªÉu ƒë·ªì thanh ƒë·ªô t∆∞∆°ng ƒë·ªìng"""
    names = [result['person_name'] for result in results]
    similarities = [result['similarity'] for result in results]
    
    fig = go.Figure(data=[
        go.Bar(
            x=names,
            y=similarities,
            marker_color=['#1f77b4', '#ff7f0e', '#2ca02c'][:len(names)],
            text=[f'{sim:.1f}%' for sim in similarities],
            textposition='auto',
        )
    ])
    
    fig.update_layout(
        title="M·ª©c ƒë·ªô t∆∞∆°ng ƒë·ªìng v·ªõi Top 3 k·∫øt qu·∫£",
        xaxis_title="Ng∆∞·ªùi",
        yaxis_title="ƒê·ªô t∆∞∆°ng ƒë·ªìng (%)",
        yaxis=dict(range=[0, 100]),
        height=400
    )
    
    return fig

def display_eigenfaces(recognizer):
    """Hi·ªÉn th·ªã eigenfaces"""
    eigenfaces = recognizer.get_eigenfaces(9)
    
    fig, axes = plt.subplots(3, 3, figsize=(12, 12))
    fig.suptitle('Top 9 Eigenfaces', fontsize=16)
    
    for i, eigenface in enumerate(eigenfaces):
        row, col = i // 3, i % 3
        eigenface_normalized = normalize_image_for_display(eigenface)
        
        axes[row, col].imshow(eigenface_normalized, cmap='gray')
        axes[row, col].set_title(f'Eigenface {i+1}')
        axes[row, col].axis('off')
    
    plt.tight_layout()
    return fig

def main():
    # Header
    st.markdown('<h1 class="main-header">üé≠ Demo PCA Face Recognition</h1>', unsafe_allow_html=True)
    
    # Sidebar th√¥ng tin
    with st.sidebar:
        st.markdown("### üìã Th√¥ng tin d·ª± √°n")
        st.markdown("""
        **ƒê·ªì √°n:** ·ª®ng d·ª•ng PCA trong nh·∫≠n di·ªán khu√¥n m·∫∑t
        
        **Nguy√™n l√Ω:**
        - S·ª≠ d·ª•ng PCA ƒë·ªÉ gi·∫£m chi·ªÅu d·ªØ li·ªáu ·∫£nh
        - T·∫°o ra c√°c Eigenfaces (khu√¥n m·∫∑t c∆° s·ªü)
        - Nh·∫≠n di·ªán b·∫±ng c√°ch so s√°nh trong kh√¥ng gian PCA
        
        **Quy tr√¨nh:**
        1. ·∫¢nh ‚Üí Vector
        2. Chu·∫©n h√≥a d·ªØ li·ªáu  
        3. √Åp d·ª•ng PCA
        4. So s√°nh kho·∫£ng c√°ch Euclidean
        """)
        
        st.markdown("### ‚öôÔ∏è C√†i ƒë·∫∑t")
        show_eigenfaces = st.checkbox("Hi·ªÉn th·ªã Eigenfaces", value=False)
        show_reconstruction = st.checkbox("Hi·ªÉn th·ªã ·∫£nh t√°i t·∫°o", value=True)
    
    # Load model
    recognizer = load_recognizer()
    
    if recognizer is None:
        st.error("‚ùå Kh√¥ng th·ªÉ load model PCA!")
        st.markdown("""
        **H∆∞·ªõng d·∫´n:**
        1. T·∫°o th∆∞ m·ª•c `data/` v√† th√™m ·∫£nh theo c·∫•u tr√∫c:
           ```
           data/
           ‚îú‚îÄ‚îÄ person1/
           ‚îÇ   ‚îú‚îÄ‚îÄ img1.jpg
           ‚îÇ   ‚îî‚îÄ‚îÄ img2.jpg
           ‚îî‚îÄ‚îÄ person2/
               ‚îú‚îÄ‚îÄ img1.jpg
               ‚îî‚îÄ‚îÄ img2.jpg
           ```
        2. Ch·∫°y l·ªánh: `python train_model.py`
        3. Refresh trang n√†y
        """)
        return
    
    st.success("‚úÖ Model PCA ƒë√£ ƒë∆∞·ª£c load th√†nh c√¥ng!")
    
    # Ph·∫ßn upload ·∫£nh
    st.markdown('<h2 class="section-header">üì§ Upload ·∫£nh ƒë·ªÉ nh·∫≠n di·ªán</h2>', unsafe_allow_html=True)
    
    # T·∫°o 2 c·ªôt cho upload options
    col1, col2 = st.columns(2)
    
    with col1:
        uploaded_file = st.file_uploader(
            "Ch·ªçn ·∫£nh t·ª´ m√°y t√≠nh",
            type=['png', 'jpg', 'jpeg'],
            help="Upload ·∫£nh khu√¥n m·∫∑t ƒë·ªÉ nh·∫≠n di·ªán"
        )
    
    with col2:
        use_camera = st.button("üì∑ Ch·ª•p ·∫£nh t·ª´ webcam", help="S·ª≠ d·ª•ng camera ƒë·ªÉ ch·ª•p ·∫£nh")
    
    # X·ª≠ l√Ω ·∫£nh
    input_image = None
    
    if uploaded_file is not None:
        input_image = Image.open(uploaded_file)
        input_image = np.array(input_image)
    
    elif use_camera:
        # Placeholder cho camera (c·∫ßn implement th√™m)
        st.info("T√≠nh nƒÉng camera ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. Vui l√≤ng s·ª≠ d·ª•ng upload file.")
    
    # N·∫øu c√≥ ·∫£nh input
    if input_image is not None:
        st.markdown('<h2 class="section-header">üîç K·∫øt qu·∫£ nh·∫≠n di·ªán</h2>', unsafe_allow_html=True)
        
        # Hi·ªÉn th·ªã ·∫£nh g·ªëc
        col1, col2, col3 = st.columns([1, 1, 1])
        
        with col1:
            st.markdown("**·∫¢nh g·ªëc**")
            st.image(input_image, use_column_width=True)
        
        # Th·ª±c hi·ªán nh·∫≠n di·ªán
        try:
            with st.spinner("ƒêang nh·∫≠n di·ªán..."):
                result = recognizer.recognize(input_image, top_k=3)
            
            # Hi·ªÉn th·ªã ·∫£nh ƒë√£ x·ª≠ l√Ω
            with col2:
                st.markdown("**·∫¢nh ƒë√£ x·ª≠ l√Ω**")
                processed_img = (result['processed_image'] * 255).astype(np.uint8)
                st.image(processed_img, use_column_width=True, clamp=True)
            
            # Hi·ªÉn th·ªã ·∫£nh t√°i t·∫°o t·ª´ PCA
            if show_reconstruction:
                with col3:
                    st.markdown("**·∫¢nh t√°i t·∫°o t·ª´ PCA**")
                    reconstructed = recognizer.reconstruct_from_pca(result['pca_representation'])
                    reconstructed_display = (reconstructed * 255).astype(np.uint8)
                    st.image(reconstructed_display, use_column_width=True, clamp=True)
            
            # K·∫øt qu·∫£ nh·∫≠n di·ªán
            st.markdown('<div class="result-box">', unsafe_allow_html=True)
            st.markdown(f"### üéØ K·∫øt qu·∫£: **{result['predicted_person']}**")
            st.markdown(f"**ƒê·ªô tin c·∫≠y:** {result['confidence']:.1f}%")
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Bi·ªÉu ƒë·ªì ƒë·ªô t∆∞∆°ng ƒë·ªìng
            st.markdown("### üìä Bi·ªÉu ƒë·ªì ƒë·ªô t∆∞∆°ng ƒë·ªìng")
            similarity_chart = plot_similarity_chart(result['top_matches'])
            st.plotly_chart(similarity_chart, use_container_width=True)
            
            # B·∫£ng chi ti·∫øt top 3
            st.markdown("### üìã Chi ti·∫øt Top 3 k·∫øt qu·∫£")
            
            # T·∫°o DataFrame cho b·∫£ng
            import pandas as pd
            df_results = pd.DataFrame([
                {
                    'Th·ª© h·∫°ng': match['rank'],
                    'T√™n ng∆∞·ªùi': match['person_name'],
                    'ƒê·ªô t∆∞∆°ng ƒë·ªìng (%)': f"{match['similarity']:.1f}%",
                    'Kho·∫£ng c√°ch': f"{match['distance']:.3f}"
                }
                for match in result['top_matches']
            ])
            
            st.dataframe(df_results, use_container_width=True)
            
        except Exception as e:
            st.error(f"‚ùå L·ªói khi nh·∫≠n di·ªán: {str(e)}")
    
    # Hi·ªÉn th·ªã Eigenfaces
    if show_eigenfaces:
        st.markdown('<h2 class="section-header">üëª Eigenfaces</h2>', unsafe_allow_html=True)
        st.markdown("""
        **Eigenfaces** l√† c√°c th√†nh ph·∫ßn ch√≠nh (principal components) c·ªßa t·∫≠p ·∫£nh khu√¥n m·∫∑t.
        M·ªói eigenface ƒë·∫°i di·ªán cho m·ªôt "h∆∞·ªõng bi·∫øn thi√™n" quan tr·ªçng trong d·ªØ li·ªáu khu√¥n m·∫∑t.
        """)
        
        try:
            eigenfaces_fig = display_eigenfaces(recognizer)
            st.pyplot(eigenfaces_fig)
        except Exception as e:
            st.error(f"L·ªói khi hi·ªÉn th·ªã eigenfaces: {str(e)}")
    
    # Ph·∫ßn gi·∫£i th√≠ch thu·∫≠t to√°n
    with st.expander("üß† Gi·∫£i th√≠ch thu·∫≠t to√°n PCA"):
        st.markdown("""
        ### Nguy√™n l√Ω ho·∫°t ƒë·ªông:
        
        1. **Thu th·∫≠p d·ªØ li·ªáu:** T·∫≠p ·∫£nh khu√¥n m·∫∑t ƒë∆∞·ª£c chuy·ªÉn th√†nh vectors
        2. **T√≠nh mean face:** Khu√¥n m·∫∑t trung b√¨nh c·ªßa t·∫≠p d·ªØ li·ªáu
        3. **T√≠nh ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai:** ƒêo l∆∞·ªùng s·ª± bi·∫øn thi√™n gi·ªØa c√°c pixel
        4. **T√¨m eigenvectors:** C√°c h∆∞·ªõng bi·∫øn thi√™n ch√≠nh (eigenfaces)
        5. **Gi·∫£m chi·ªÅu:** Ch·ªâ gi·ªØ l·∫°i k eigenfaces quan tr·ªçng nh·∫•t
        6. **Nh·∫≠n di·ªán:** So s√°nh kho·∫£ng c√°ch trong kh√¥ng gian PCA
        
        ### ∆Øu ƒëi·ªÉm:
        - Gi·∫£m chi·ªÅu d·ªØ li·ªáu hi·ªáu qu·∫£
        - Lo·∫°i b·ªè nhi·ªÖu
        - T√≠nh to√°n nhanh
        
        ### Nh∆∞·ª£c ƒëi·ªÉm:
        - Nh·∫°y c·∫£m v·ªõi √°nh s√°ng
        - Y√™u c·∫ßu ·∫£nh c√πng k√≠ch th∆∞·ªõc
        - Kh√¥ng t·ªët v·ªõi t∆∞ th·∫ø kh√°c nhau
        """)

if __name__ == "__main__":
    main()